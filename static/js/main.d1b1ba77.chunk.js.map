{"version":3,"sources":["components/NoMatch.js","components/MultipleSelector.js","components/DataPagers.js","App.js","serviceWorker.js","index.js"],"names":["NoMatch","props","class","className","MultipleSelector","useState","values_1","setValues_1","values_2","setValues_2","values_3","setValues_3","style","width","height","overflow","display","flexDirection","alignItems","options","selectedValues","onChange","e","borderRadius","outline","backgroundColor","padding","marginTop","value","name","selectedOptionStyle","color","placeHolder","selectedPlaceHolder","map","val","index","length","selectAllOptions","id","margin","DataPagers","data","setData","showData","setShowData","dataPager_1","setDataPager_1","dataPager_2","setDataPager_2","dataPager_3","setDataPager_3","useEffect","fetch","method","headers","then","res","json","show_100","slice","showName","show","catch","err","console","error","ShowTable","dataTable","border","key","src","image","medium","language","genres","item","rating","average","textAlign","dataEachPage","selectedPageColor","stylePager","styleNextPrevButton","styleDataEachPage","App","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d1b1ba77.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\n\r\nconst NoMatch = (props) => {\r\n    return (\r\n        <section class='errorPage disableTextSelectionHighlighting'>\r\n            <div className='errorPage__text'>\r\n                <h3>404</h3>\r\n            </div>\r\n            <span className='errorPage__templeweed-container'>\r\n                <img className='errorPage__tembleweed' />\r\n            </span>\r\n            <div className='errorPage__terrain'></div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NoMatch;","import React, { useState } from 'react';\r\nimport MultipleSelect from 'react-selector-multiple';\r\n\r\nconst MultipleSelector = (props) => {\r\n    const [values_1, setValues_1] = useState([]);\r\n    const [values_2, setValues_2] = useState([]);\r\n    const [values_3, setValues_3] = useState([]);\r\n\r\n    const options_1 = [\r\n        'Red',\r\n        'Green',\r\n        'Blue',\r\n        'Yellow'\r\n    ];\r\n\r\n    const options_2 = [\r\n        { value: 'Red', name: 'Red' },\r\n        { value: 'Green', name: 'Green' },\r\n        { value: 'Blue', name: 'Blue' },\r\n        { value: 'Yellow', name: 'Yellow' }\r\n    ];\r\n\r\n    const options_3 = [\r\n        { value: { id: 1 }, name: 'Red' },\r\n        { value: { id: 2, value: 'green' }, name: 'Green' },\r\n        { value: { id: 3, value: 'blue' }, name: 'Blue' },\r\n        { value: { id: 4, value: 'yellow' }, name: 'Yellow' }\r\n    ];\r\n\r\n    return (\r\n        <div style={{ width: '100vw', height: '100vh', overflow: 'auto' }}>\r\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                <div>\r\n                    <h4>options_1 array of strings:</h4>\r\n                    <MultipleSelect\r\n                        options={options_1}\r\n                        selectedValues={values_1}\r\n                        onChange={e => setValues_1(e)}\r\n                        style={{ borderRadius: '5px', outline: 'none' }}\r\n                    />\r\n                </div>\r\n                <div style={{ width: 'fit-content', height: 'fit-content', backgroundColor: '#d8d8d8', padding: '10px', borderRadius: '5px', marginTop: '5px' }}>\r\n                    <pre>const [values_1, setValues_1] = useState([]);</pre>\r\n                    <pre>\r\n                        const options_1 = [\r\n                        'Red',\r\n                        'Green',\r\n                        'Blue',\r\n                        'Yellow'\r\n                        ];\r\n                 </pre>\r\n\r\n                    <pre>\r\n                        <div>{`<MultipleSelect `}</div>\r\n                        <div>   {`options={options_1}`}</div>\r\n                        <div>   {`selectedValues={values_1}`}</div>\r\n                        <div>   {`onChange={e => setValues_1(e)}`}</div>\r\n                        <div>   {`style={{ borderRadius: '5px', outline: 'none' }}`}</div>\r\n                        <div>{`/>`}</div>\r\n                    </pre>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>options_2 array of objects, the value is string:</h4>\r\n                    <MultipleSelect\r\n                        options={options_2}\r\n                        selectedValues={values_2}\r\n                        onChange={e => setValues_2(e)}\r\n                        style={{ borderRadius: '5px', outline: 'none' }}\r\n                        selectedOptionStyle={{ color: '#dc143c' }}\r\n                        placeHolder='Multiple Select'\r\n                        selectedPlaceHolder={e => e.map((val, index) => e.length - 1 === index ? val : `${val}, `)}\r\n                        selectAllOptions\r\n                    />\r\n                </div>\r\n                <div style={{ width: 'fit-content', height: 'fit-content', backgroundColor: '#d8d8d8', padding: '10px', borderRadius: '5px', marginTop: '5px' }}>\r\n                    <pre>const [values_2, setValues_2] = useState([]);</pre>\r\n                    <pre>\r\n                        <div>{`const options_2 = [`}</div>\r\n                        <div>   {`{ value: 'Red', name: 'Red' },`}</div>\r\n                        <div>   {`{ value: 'Green', name: 'Green' },`}</div>\r\n                        <div>   {`{ value: 'Blue', name: 'Blue' },`}</div>\r\n                        <div>   {`{ value: 'Yellow', name: 'Yellow' }`}</div>\r\n                        <div>{`];`}</div>\r\n                    </pre>\r\n\r\n                    <pre>\r\n                        <div>{`<MultipleSelect `}</div>\r\n                        <div>   {`options={options_2}`}</div>\r\n                        <div>   {`selectedValues={values_2}`}</div>\r\n                        <div>   {`onChange={e => setValues_2(e)}`}</div>\r\n                        <div>   {`style={{ borderRadius: '5px', outline: 'none' }}`}</div>\r\n                        <div>   {`selectedOptionStyle={{ color: '#dc143c' }}`}</div>\r\n                        <div>   {`placeHolder='Multiple Select'`}</div>\r\n                        <div>   {`selectedPlaceHolder={e => e.map((val, index) => \r\n                        e.length - 1 === index ? val : \\`` + '${val}, ' + `\\`)}`}</div>\r\n                        <div>   {`selectAllOptions`}</div>\r\n                        <div>{`/>`}</div>\r\n                    </pre>\r\n                </div>\r\n\r\n                <div>\r\n                    <h4>options_3 array of objects, the value is object:</h4>\r\n                    <MultipleSelect\r\n                        options={options_3}\r\n                        selectedValues={values_3}\r\n                        onChange={e => setValues_3(e)}\r\n                        style={{ borderRadius: '5px', outline: 'none' }}\r\n                        selectedOptionStyle={{ color: '#dc143c' }}\r\n                        placeHolder='Multiple Select'\r\n                        selectedPlaceHolder={e => e.map((val, index) => e.length - 1 === index ? val.value ? val.value : val.id :\r\n                            `${val.value ? val.value : val.id}, `)}\r\n                        selectAllOptions\r\n                    />\r\n                </div>\r\n                <div style={{ width: 'fit-content', height: 'fit-content', backgroundColor: '#d8d8d8', padding: '10px', borderRadius: '5px', margin: '5px 0 15px 0' }}>\r\n                    <pre>const [values_3, setValues_3] = useState([]);</pre>\r\n                    <pre>\r\n                        <div>{`const options_3 = [`}</div>\r\n                        <div>   {`{ value: { id: 1 }, name: 'Red' },`}</div>\r\n                        <div>   {`{ value: { id: 2, value: 'green' }, name: 'Green' },`}</div>\r\n                        <div>   {`{ value: { id: 3, value: 'blue' }, name: 'Blue' },`}</div>\r\n                        <div>   {`{ value: { id: 4, value: 'yellow' }, name: 'Yellow' }`}</div>\r\n                        <div>{`];`}</div>\r\n                    </pre>\r\n\r\n                    <pre>\r\n                        <div>{`<MultipleSelect `}</div>\r\n                        <div>   {`options={options_3}`}</div>\r\n                        <div>   {`selectedValues={values_3}`}</div>\r\n                        <div>   {`onChange={e => setValues_3(e)}`}</div>\r\n                        <div>   {`style={{ borderRadius: '5px', outline: 'none' }}`}</div>\r\n                        <div>   {`selectedOptionStyle={{ color: '#dc143c' }}`}</div>\r\n                        <div>   {`placeHolder='Multiple Select'`}</div>\r\n                        <div>   {`selectedPlaceHolder={e => e.map((val, index) => e.length - 1 === index ? \r\n                        (val.value ? val.value : val.id) :\r\n                        \\`` + '${val.value ? val.value : val.id}, ' + `\\`)}`}</div>\r\n                        <div>   {`selectAllOptions`}</div>\r\n                        <div>{`/>`}</div>\r\n                    </pre>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MultipleSelector;","import React, { useState, useEffect } from 'react';\r\nimport DataPager from 'react-data-pager';\r\n\r\nconst DataPagers = () => {\r\n    const [data, setData] = useState();\r\n    const [showData, setShowData] = useState();\r\n\r\n    const [dataPager_1, setDataPager_1] = useState();\r\n    const [dataPager_2, setDataPager_2] = useState();\r\n    const [dataPager_3, setDataPager_3] = useState();\r\n\r\n    useEffect(() => {\r\n        fetch('http://api.tvmaze.com/shows', {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                const show_100 = res.length > 100 ? res.slice(0, 100) : res;\r\n                setShowData(show_100);\r\n                const showName = show_100.map(show => show.name);\r\n                setData(showName);\r\n            })\r\n            .catch(err => console.error(err));\r\n    }, [])\r\n\r\n    const ShowTable = ({ dataTable }) => {\r\n        return (\r\n            <table border={1} style={{ width: '100%' }}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Image</th>\r\n                        <th>Name</th>\r\n                        <th>Language</th>\r\n                        <th>Genres</th>\r\n                        <th>Rating</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {dataTable && dataTable.map((show, index) => <tr key={index} >\r\n                        <td><img style={{ height: '100px' }} src={show.image.medium} /></td>\r\n                        <td>{show.name}</td>\r\n                        <td>{show.language}</td>\r\n                        <td><ul> {show.genres.map(item => <li key={item}>{item}</li>)}</ul></td>\r\n                        <td>{show.rating.average}</td>\r\n                    </tr>)}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ textAlign: 'center' }}>\r\n                {dataPager_1 && dataPager_1.map((showName, index) => dataPager_1.length - 1 === index ? showName : `${showName}, `)}\r\n            </div>\r\n\r\n            <DataPager\r\n                data={data}\r\n                onChange={e => setDataPager_1(e)}\r\n                style={{ marginTop: '5px' }}\r\n            />\r\n\r\n            <div style={{ textAlign: 'center', marginTop: '15px' }}>\r\n                <ShowTable dataTable={dataPager_2} />\r\n            </div>\r\n\r\n            <DataPager\r\n                data={showData}\r\n                dataEachPage={[5]}\r\n                onChange={e => setDataPager_2(e)}\r\n                selectedPageColor='#00ff00'\r\n                style={{ width: '30%', margin: 'auto', marginTop: '5px' }}\r\n                stylePager={{ width: '100%' }}\r\n            />\r\n\r\n            <div style={{ textAlign: 'center', marginTop: '15px' }}>\r\n                <ShowTable dataTable={dataPager_3} />\r\n            </div>\r\n\r\n            <DataPager\r\n                data={showData}\r\n                dataEachPage={[5, 10, 15]}\r\n                onChange={e => setDataPager_3(e)}\r\n                selectedPageColor='#dd0d00'\r\n                style={{ width: '50%', margin: 'auto', marginTop: '5px' }}\r\n                stylePager={{ width: '50%', borderRadius: '0', backgroundColor: '#d8d8d8' }}\r\n                styleNextPrevButton={{ color: '#02ddd2' }}\r\n                styleDataEachPage={{ borderRadius: '0', backgroundColor: '#d8d8d8' }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default DataPagers;\r\n","import React from 'react';\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport NoMatch from './components/NoMatch';\nimport MultipleSelector from './components/MultipleSelector';\nimport DataPagers from './components/DataPagers';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <Switch>\n        <Route path={'/react-data-pager/'} component={DataPagers} />\n        <Route path={'/react-selector-multiple/'} component={MultipleSelector} />\n        <Route path='*' component={NoMatch} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}